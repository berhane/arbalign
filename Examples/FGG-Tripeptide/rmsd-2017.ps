%!PS-Adobe-2.0
%%Title: rmsd-2017.ps
%%Creator: gnuplot 4.2 patchlevel 6 
%%CreationDate: Fri Apr 21 21:58:06 2017
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following 6 true/false flags may be edited by hand if required
% The unit line width may also be changed
%
/Color true def
/Blacktext false def
/Solid true def
/Dashlength 1 def
/Landscape true def
/Level1 false def
/Rounded false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
%
/vshift -53 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (rmsd-2017.ps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.2 patchlevel 6 )
  /Author (Berhane Temelso)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Fri Apr 21 21:58:06 2017)
  /DOCINFO pdfmark
end
} ifelse
%
% Gnuplot Prolog Version 4.2 (August 2006)
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get stringwidth pop add} {pop} ifelse} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
880 575 M
6000 0 V
stroke
LTb
880 575 M
63 0 V
5937 0 R
-63 0 V
stroke
784 575 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 0.5)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 1287 M
6000 0 V
stroke
LTb
880 1287 M
63 0 V
5937 0 R
-63 0 V
stroke
784 1287 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 1)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 1999 M
6000 0 V
stroke
LTb
880 1999 M
63 0 V
5937 0 R
-63 0 V
stroke
784 1999 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 1.5)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 2712 M
6000 0 V
stroke
LTb
880 2712 M
63 0 V
5937 0 R
-63 0 V
stroke
784 2712 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 2)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 3424 M
6000 0 V
stroke
LTb
880 3424 M
63 0 V
5937 0 R
-63 0 V
stroke
784 3424 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 2.5)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 4136 M
1577 0 V
2846 0 R
1577 0 V
stroke
LTb
880 4136 M
63 0 V
5937 0 R
-63 0 V
stroke
784 4136 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 3)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 4848 M
6000 0 V
stroke
LTb
880 4848 M
63 0 V
5937 0 R
-63 0 V
stroke
784 4848 M
[ [(Helvetica) 160.0 0.0 true true 0 ( 3.5)]
] -53.3 MRshow
1.000 UL
LTb
1.000 UL
LTa
880 575 M
0 4273 V
stroke
LTb
880 575 M
0 -63 V
0 4336 R
0 63 V
stroke
880 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (2)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
1342 575 M
0 4273 V
stroke
LTb
1342 575 M
0 -63 V
0 4336 R
0 63 V
stroke
1342 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (3)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
1803 575 M
0 4273 V
stroke
LTb
1803 575 M
0 -63 V
0 4336 R
0 63 V
stroke
1803 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (4)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
2265 575 M
0 4273 V
stroke
LTb
2265 575 M
0 -63 V
0 4336 R
0 63 V
stroke
2265 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (5)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
2726 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
2726 575 M
0 -63 V
0 4336 R
0 63 V
stroke
2726 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (6)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
3188 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
3188 575 M
0 -63 V
0 4336 R
0 63 V
stroke
3188 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (7)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
3649 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
3649 575 M
0 -63 V
0 4336 R
0 63 V
stroke
3649 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (8)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
4111 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
4111 575 M
0 -63 V
0 4336 R
0 63 V
stroke
4111 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (9)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
4572 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
4572 575 M
0 -63 V
0 4336 R
0 63 V
stroke
4572 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (10)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
5034 575 M
0 3090 V
0 1120 R
0 63 V
stroke
LTb
5034 575 M
0 -63 V
0 4336 R
0 63 V
stroke
5034 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (11)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
5495 575 M
0 4273 V
stroke
LTb
5495 575 M
0 -63 V
0 4336 R
0 63 V
stroke
5495 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (12)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
5957 575 M
0 4273 V
stroke
LTb
5957 575 M
0 -63 V
0 4336 R
0 63 V
stroke
5957 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (13)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
6418 575 M
0 4273 V
stroke
LTb
6418 575 M
0 -63 V
0 4336 R
0 63 V
stroke
6418 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (14)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTa
6880 575 M
0 4273 V
stroke
LTb
6880 575 M
0 -63 V
0 4336 R
0 63 V
stroke
6880 352 M
[ [(Helvetica) 160.0 0.0 true true 0 (15)]
] -53.3 MCshow
1.000 UL
LTb
1.000 UL
LTb
880 4848 N
880 575 L
6000 0 V
0 4273 V
-6000 0 V
Z stroke
LCb setrgbcolor
320 2711 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (RMSD \(Angs\))]
] -53.3 MCshow
grestore
LTb
LCb setrgbcolor
LTb
LCb setrgbcolor
3880 112 M
[ [(Helvetica) 160.0 0.0 true true 0 (Different isomers of FGG tripeptide)]
] -53.3 MCshow
LTb
LCb setrgbcolor
LTb
1.000 UP
1.000 UL
LTb
2.000 UP
2.000 UL
LTb
3096 4585 M
[ [(Helvetica) 160.0 0.0 true true 0 (RMSD\(Conventional\))]
] -53.3 MLshow
2553 4585 M
447 0 V
880 3204 M
462 1040 V
461 -477 V
462 4 V
461 -456 V
462 359 V
3649 2192 L
462 1038 V
461 132 V
462 305 V
461 -400 V
462 -583 V
461 114 V
462 1550 V
880 3204 Pnt
1342 4244 Pnt
1803 3767 Pnt
2265 3771 Pnt
2726 3315 Pnt
3188 3674 Pnt
3649 2192 Pnt
4111 3230 Pnt
4572 3362 Pnt
5034 3667 Pnt
5495 3267 Pnt
5957 2684 Pnt
6418 2798 Pnt
6880 4348 Pnt
2777 4585 Pnt
2.000 UP
2.000 UL
LT0
LTb
3096 4345 M
[ [(Helvetica) 160.0 0.0 true true 0 (RMSD\(KM-ByAtomName\))]
] -53.3 MLshow
LT0
2553 4345 M
447 0 V
880 2435 M
462 766 V
461 -521 V
462 596 V
2726 2142 L
3188 925 L
461 895 V
462 666 V
461 -323 V
462 -486 V
461 325 V
462 106 V
461 -37 V
462 866 V
880 2435 Pls
1342 3201 Pls
1803 2680 Pls
2265 3276 Pls
2726 2142 Pls
3188 925 Pls
3649 1820 Pls
4111 2486 Pls
4572 2163 Pls
5034 1677 Pls
5495 2002 Pls
5957 2108 Pls
6418 2071 Pls
6880 2937 Pls
2777 4345 Pls
2.000 UP
2.000 UL
LT3
LTb
3096 4105 M
[ [(Helvetica) 160.0 0.0 true true 0 (RMSD\(KM-ByAtomType\))]
] -53.3 MLshow
LT3
2553 4105 M
447 0 V
880 2491 M
462 668 V
461 -138 V
462 519 V
2726 2005 L
3188 925 L
461 982 V
462 504 V
461 -406 V
462 -328 V
461 351 V
462 135 V
461 -31 V
462 1155 V
880 2491 Box
1342 3159 Box
1803 3021 Box
2265 3540 Box
2726 2005 Box
3188 925 Box
3649 1907 Box
4111 2411 Box
4572 2005 Box
5034 1677 Box
5495 2028 Box
5957 2163 Box
6418 2132 Box
6880 3287 Box
2777 4105 Box
2.000 UP
2.000 UL
LT2
LTb
3096 3865 M
[ [(Helvetica) 160.0 0.0 true true 0 (RMSD\(KM-ByConnectivity\))]
] -53.3 MLshow
LT2
2553 3865 M
447 0 V
880 2761 M
462 728 V
461 -51 V
462 245 V
2726 2451 L
3188 1236 L
461 756 V
462 597 V
461 -865 V
462 191 V
461 375 V
462 224 V
461 -93 V
462 1011 V
880 2761 BoxF
1342 3489 BoxF
1803 3438 BoxF
2265 3683 BoxF
2726 2451 BoxF
3188 1236 BoxF
3649 1992 BoxF
4111 2589 BoxF
4572 1724 BoxF
5034 1915 BoxF
5495 2290 BoxF
5957 2514 BoxF
6418 2421 BoxF
6880 3432 BoxF
2777 3865 BoxF
1.000 UL
LTb
880 4848 N
880 575 L
6000 0 V
0 4273 V
-6000 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1
